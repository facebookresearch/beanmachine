A "binary tree" is either empty, or a pair of binary trees,
called "left" and "right".

The "height" of a binary tree is zero if empty, or 1 + the maximum of the
left and right height otherwise.

A binary tree is said to be "balanced" if it is empty, or if
left and right are both balanced, and the heights of left and right
differ by no more than one.

Suppose X is an empty binary tree and O is a non-empty.
These trees are balanced:



X       O           O
       / \         / \
      X   X       X   O
                     / \
                    X   X

This is not balanced:

    O
   / \
  X   O
     / \
    X   O
       / \
      X   X

In the programming language of your choice write a method that takes a
well-formed binary tree and returns a Boolean: true if the input is balanced,
false otherwise.



Recursive function that takes a binary tree

Leaf has to return true

Haven't taken into account height

parent returns true if both children are true and height(left) and height(right)
differ by no more than one.

I need a function that returns the height of a subtree and whether tree is balanced

that's a helper to a function that only returns the boo

I realized l needed to return two pieces of information but I only wanted to touch every node once

Struggled slightly with O() notation but good instincts.

* not recursive -- iterative
* could have a callback function or a global variable
* cautious about global variables
* Keep track of how many nodes deep I am
* I want each individual node to know if we're already unbalanced


// A "binary tree" is either empty, or a pair of binary trees,
// called "left" and "right".


// The "height" of a binary tree is zero if empty, or 1 + the maximum of the
// left and right height otherwise.

// A binary tree is said to be "balanced" if it is empty, or if
// left and right are both balanced, and the heights of left and right
// differ by no more than one.

// Suppose X is an empty binary tree and O is a non-empty.
// These trees are balanced:



// X       O           O true, 1
//        / \         / \
//       X   X       X true 0  O true, 1: both children true and height(left) - height(right) < 1
//                      / \
//                     X true, 0   X true, 0

//                     This is not balanced:

//     O
//    / \
//   X   O
//      / \
//     X   O
//        / \
//       X   X


// In the programming language of your choice write a method that takes a
// well-formed binary tree and returns a Boolean: true if the input is balanced,
// false otherwise.

// - recursive function that returns the height of subtree and whether tree is balanced
// - function that doesn't return height, only boolean



type returnVal = {
  height: number;
  isBalanced: boolean;
};

function getHeightAndBalanced(tree:Tree): returnVal {
  if (tree.left === null && tree.right === null) {
    return {height: 0, isBalanced: true};
  }
  let left = getHeightAndBalanced(tree.left);
  let right = getHeightAndBalanced(tree.right);
  const isBalanced = left.isBalanced && right.isBalanced && Math.abs(right.height-left.height) <= 1);
  const height = Math.max(left.height, right.height) + 1;
  return {height, isBalanced};
}

function isBalanced(tree:Tree): boolean {
  return getHeightAndBalanced(tree).isBalanced;
}

ericlippert@fb.com
