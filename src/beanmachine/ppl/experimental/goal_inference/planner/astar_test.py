# (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

from beanmachine.facebook.goal_inference.planner.astar import AstarPlanner
from beanmachine.facebook.goal_inference.utils import manhattan_gem_heuristic


def test_astar_generate_plan_dkg_problem_1(dkg_domain, dkg_state_one):
    astar_solver = AstarPlanner(dkg_domain, manhattan_gem_heuristic)
    plan, solved = astar_solver.generate_plan(dkg_state_one)
    assert solved
    assert plan.actions == [
        ["down"],
        ["pickup", "key1"],
        ["down"],
        ["unlock", "key1", "right"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["pickup", "gem1"],
    ]


def test_astar_generate_plan_dkg_problem_2(dkg_domain, dkg_state_two):
    astar_solver = AstarPlanner(dkg_domain, manhattan_gem_heuristic)
    plan, solved = astar_solver.generate_plan(dkg_state_two)
    assert solved
    assert plan.actions == [
        ["down"],
        ["down"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["pickup", "key1"],
        ["down"],
        ["down"],
        ["unlock", "key1", "right"],
        ["right"],
        ["right"],
        ["up"],
        ["pickup", "gem1"],
    ]


def test_astar_generate_plan_dkg_problem_3(dkg_domain, dkg_state_three):
    astar_solver = AstarPlanner(dkg_domain, manhattan_gem_heuristic)
    plan, solved = astar_solver.generate_plan(dkg_state_three)
    assert solved
    soln_one = plan.actions == [
        ["right"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["left"],
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["pickup", "key1"],
        ["right"],
        ["right"],
        ["unlock", "key1", "right"],
        ["right"],
        ["right"],
        ["up"],
        ["right"],
        ["right"],
        ["down"],
        ["pickup", "key2"],
        ["right"],
        ["unlock", "key2", "down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["pickup", "gem3"],
    ]
    soln_two = plan.actions == [
        ["right"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["left"],
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["pickup", "key1"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["right"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["unlock", "key1", "right"],
        ["right"],
        ["right"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["right"],
        ["right"],
        ["pickup", "gem3"],
    ]
    soln_three = plan.actions == [
        ["right"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["left"],
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["pickup", "key1"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["right"],
        ["right"],
        ["up"],
        ["up"],
        ["right"],
        ["unlock", "key1", "right"],
        ["right"],
        ["right"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["right"],
        ["right"],
        ["pickup", "gem3"],
    ]
    assert soln_one or soln_two or soln_three


def test_astar_generate_plan_dkg_problem_4(dkg_domain, dkg_state_four):
    astar_solver = AstarPlanner(dkg_domain, manhattan_gem_heuristic)
    plan, solved = astar_solver.generate_plan(dkg_state_four)
    assert solved
    soln_one = plan.actions == [
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["right"],
        ["right"],
        ["right"],
        ["right"],
        ["down"],
        ["down"],
        ["pickup", "key1"],
        ["up"],
        ["up"],
        ["pickup", "key2"],
        ["right"],
        ["right"],
        ["unlock", "key2", "down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["left"],
        ["left"],
        ["unlock", "key1", "up"],
        ["up"],
        ["up"],
        ["pickup", "gem3"],
    ]

    soln_two = plan.actions == [
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["right"],
        ["right"],
        ["right"],
        ["right"],
        ["down"],
        ["down"],
        ["pickup", "key1"],
        ["up"],
        ["up"],
        ["pickup", "key2"],
        ["right"],
        ["right"],
        ["unlock", "key1", "down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["left"],
        ["left"],
        ["unlock", "key2", "up"],
        ["up"],
        ["up"],
        ["pickup", "gem3"],
    ]

    soln_three = plan.actions == [
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["right"],
        ["right"],
        ["right"],
        ["right"],
        ["pickup", "key2"],
        ["down"],
        ["down"],
        ["pickup", "key1"],
        ["up"],
        ["up"],
        ["right"],
        ["right"],
        ["unlock", "key2", "down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["left"],
        ["left"],
        ["unlock", "key1", "up"],
        ["up"],
        ["up"],
        ["pickup", "gem3"],
    ]

    soln_four = plan.actions == [
        ["left"],
        ["left"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["up"],
        ["right"],
        ["right"],
        ["right"],
        ["right"],
        ["pickup", "key2"],
        ["down"],
        ["down"],
        ["pickup", "key1"],
        ["up"],
        ["up"],
        ["right"],
        ["right"],
        ["unlock", "key1", "down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["down"],
        ["left"],
        ["left"],
        ["unlock", "key2", "up"],
        ["up"],
        ["up"],
        ["pickup", "gem3"],
    ]
    assert soln_one or soln_two or soln_three or soln_four
