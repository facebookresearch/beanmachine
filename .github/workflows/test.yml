name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHONUNBUFFERED: 1
  PYTEST_ADDOPTS: "--color=yes"

jobs:
  conda-install:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ['3.9']
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda/tree/v2#use-a-default-shell
        shell: bash -l {0}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Set up Miniconda with Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        miniconda-version: "latest"
        python-version: ${{ matrix.python-version }}
        activate-environment: test_env

    - name: Install dependencies
      run: |
        conda install -c conda-forge -y boost-cpp eigen=3.4.0
        python -m pip install --upgrade pip

    - name: Install CPU PyTorch (only for Linux)
      if: matrix.os == 'ubuntu-latest'
      run: pip install torch --extra-index-url https://download.pytorch.org/whl/cpu

    - name: Install Ninja
      uses: llvm/actions/install-ninja@55d844821959226fab4911f96f37071c1d4c3268

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}-${{ steps.get-submodule-hash.outputs.hash }}


    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "14.0"
        directory: ${{ runner.temp }}/llvm

    - name: build llvm
      run: |
        cd $GITHUB_WORKSPACE
        mkdir build
        cd build
        cmake $GITHUB_WORKSPACE/externals/llvm-project/llvm -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=Native -DLLVM_ENABLE_PROJECTS="mlir;llvm" -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cmake --build . --target check-mlir

    - name: build pybind
      run: |
        $(which python) -m pip install pytest
        cd $GITHUB_WORKSPACE/src/beanmachine/paic2/externals/pybind11
        mkdir build
        cd build
        cmake $GITHUB_WORKSPACE/src/beanmachine/paic2/externals/pybind11 -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python)
        cmake --build . 

    - name: build paic2
      run: |
        cd $GITHUB_WORKSPACE/src/beanmachine/paic2
        mkdir build
        cd build
        cmake $GITHUB_WORKSPACE/src/beanmachine/paic2 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_MODULE_PATH=$GITHUB_WORKSPACE/build -DPYTHON_EXECUTABLE=$(which python) -DBM_ROOT=$GITHUB_WORKSPACE -DMLIR_DIR=$GITHUB_WORKSPACE/build/lib/cmake/mlir -DLLVM_DIR=$GITHUB_WORKSPACE/build/lib/cmake/llvm
        cmake --build . 
        cp $GITHUB_WORKSPACE/src/beanmachine/paic2/build/*.so $GITHUB_WORKSPACE/src

    - name: Install Bean Machine in editable mode
      run: pip install -v -e .[dev]

    - name: Print out package info to help with debug
      run: pip list

    - name: Run unit tests with pytest
      run: pytest .
